ARM GAS  C:\Users\DGILLI~1\AppData\Local\Temp\ccaGreme.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"main.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.rodata
  20              		.align	2
  21              	.LC0:
  22 0000 52656164 		.ascii	"Read from the EEPROM\012\015\000"
  22      2066726F 
  22      6D207468 
  22      65204545 
  22      50524F4D 
  23 0017 00       		.align	2
  24              	.LC1:
  25 0018 57726974 		.ascii	"Write to the EEPROM\012\015\000"
  25      6520746F 
  25      20746865 
  25      20454550 
  25      524F4D0A 
  26 002e 0000     		.align	2
  27              	.LC2:
  28 0030 426C696E 		.ascii	"Blinking the LEDs on the RPP-UIO-16 card, please wa"
  28      6B696E67 
  28      20746865 
  28      204C4544 
  28      73206F6E 
  29 0063 69740A0D 		.ascii	"it\012\015\000"
  29      00
  30              		.align	2
  31              	.LC3:
  32 0068 436F6D70 		.ascii	"Completed blinking the LEDs on the RPP-UIO-16 card\012"
  32      6C657465 
  32      6420626C 
  32      696E6B69 
  32      6E672074 
  33 009b 0D00     		.ascii	"\015\000"
  34 009d 000000   		.align	2
  35              	.LC4:
  36 00a0 4E6F7420 		.ascii	"Not a valid command, legal values are r, w, b\012\015"
  36      61207661 
  36      6C696420 
  36      636F6D6D 
  36      616E642C 
ARM GAS  C:\Users\DGILLI~1\AppData\Local\Temp\ccaGreme.s 			page 2


  37 00cf 00       		.ascii	"\000"
  38              		.section	.text.main,"ax",%progbits
  39              		.align	2
  40              		.global	main
  41              		.thumb
  42              		.thumb_func
  43              		.type	main, %function
  44              	main:
  45              	.LFB64:
  46              		.file 1 "main.c"
   1:main.c        **** /*******************************************************************************
   2:main.c        **** * File Name: main.c
   3:main.c        **** *
   4:main.c        **** * Version: 2.0
   5:main.c        **** *
   6:main.c        **** * Description:
   7:main.c        **** *   The component is enumerated as a Virtual Com port. Receives data from the 
   8:main.c        **** *   hyper terminal, then sends back the received data.
   9:main.c        **** *
  10:main.c        **** * Related Document:
  11:main.c        **** *  Universal Serial Bus Specification Revision 2.0
  12:main.c        **** *  Universal Serial Bus Class Definitions for Communications Devices
  13:main.c        **** *  Revision 1.2
  14:main.c        **** *
  15:main.c        **** ********************************************************************************
  16:main.c        **** * Copyright 2015, Cypress Semiconductor Corporation. All rights reserved.
  17:main.c        **** * This software is owned by Cypress Semiconductor Corporation and is protected
  18:main.c        **** * by and subject to worldwide patent and copyright laws and treaties.
  19:main.c        **** * Therefore, you may use this software only as provided in the license agreement
  20:main.c        **** * accompanying the software package from which you obtained this software.
  21:main.c        **** * CYPRESS AND ITS SUPPLIERS MAKE NO WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
  22:main.c        **** * WITH REGARD TO THIS SOFTWARE, INCLUDING, BUT NOT LIMITED TO, NONINFRINGEMENT,
  23:main.c        **** * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
  24:main.c        **** *******************************************************************************/
  25:main.c        **** 
  26:main.c        **** #include <project.h>
  27:main.c        **** #include "stdio.h"
  28:main.c        **** #include "Test_RPP-UIO_16.h"
  29:main.c        **** 
  30:main.c        **** 
  31:main.c        **** #if defined (__GNUC__)
  32:main.c        ****     /* Add an explicit reference to the floating point printf library */
  33:main.c        ****     /* to allow usage of the floating point conversion specifiers. */
  34:main.c        ****     /* This is not linked in by default with the newlib-nano library. */
  35:main.c        **** //    asm (".global _printf_float");
  36:main.c        **** #endif
  37:main.c        **** 
  38:main.c        **** #define USBFS_DEVICE    (0u)
  39:main.c        **** 
  40:main.c        **** /* The inBuffer size is equal to the maximum packet size of the IN and OUT bulk
  41:main.c        **** * endpoints.
  42:main.c        **** */
  43:main.c        **** #define USBUART_Buffer_SIZE (64u)
  44:main.c        **** 
  45:main.c        **** /*******************************************************************************
  46:main.c        **** * Function Name: main
  47:main.c        **** ********************************************************************************
ARM GAS  C:\Users\DGILLI~1\AppData\Local\Temp\ccaGreme.s 			page 3


  48:main.c        **** *
  49:main.c        **** * Summary:
  50:main.c        **** *  The main function performs the following actions:
  51:main.c        **** *   1. Waits until VBUS becomes valid and starts the USBFS component which is
  52:main.c        **** *      enumerated as virtual Com port.
  53:main.c        **** *   2. Waits until the device is enumerated by the host.
  54:main.c        **** *   3. Waits for data coming from the hyper terminal and sends it back.
  55:main.c        **** *
  56:main.c        **** * Parameters:
  57:main.c        **** *  None.
  58:main.c        **** *
  59:main.c        **** * Return:
  60:main.c        **** *  None.
  61:main.c        **** *
  62:main.c        **** *******************************************************************************/
  63:main.c        **** int main()
  64:main.c        **** {
  47              		.loc 1 64 0
  48              		.cfi_startproc
  49              		@ args = 0, pretend = 0, frame = 392
  50              		@ frame_needed = 1, uses_anonymous_args = 0
  51 0000 B0B5     		push	{r4, r5, r7, lr}
  52              		.cfi_def_cfa_offset 16
  53              		.cfi_offset 4, -16
  54              		.cfi_offset 5, -12
  55              		.cfi_offset 7, -8
  56              		.cfi_offset 14, -4
  57 0002 E2B0     		sub	sp, sp, #392
  58              		.cfi_def_cfa_offset 408
  59 0004 00AF     		add	r7, sp, #0
  60              		.cfi_def_cfa_register 7
  65:main.c        ****     uint16 inCount;
  66:main.c        ****     uint16 outCount;
  67:main.c        ****     uint8 inBuffer[USBUART_Buffer_SIZE];
  68:main.c        ****     char outBuffer[USBUART_Buffer_SIZE];
  69:main.c        ****     char eepromBuffer[256];
  70:main.c        ****         
  71:main.c        ****     CyGlobalIntEnable;
  61              		.loc 1 71 0
  62              		.syntax unified
  63              	@ 71 "main.c" 1
  64 0006 62B6     		CPSIE   i
  65              	@ 0 "" 2
  72:main.c        **** 
  73:main.c        ****     /* Start USBFS operation with 5-V operation. */
  74:main.c        ****     USBUART_Start(USBFS_DEVICE, USBUART_5V_OPERATION);
  66              		.loc 1 74 0
  67              		.thumb
  68              		.syntax unified
  69 0008 0121     		movs	r1, #1
  70 000a 0020     		movs	r0, #0
  71 000c FFF7FEFF 		bl	USBUART_Start
  72              	.L14:
  75:main.c        ****     
  76:main.c        ****     for(;;)
  77:main.c        ****     {
  78:main.c        ****         /* Host can send double SET_INTERFACE request. */
ARM GAS  C:\Users\DGILLI~1\AppData\Local\Temp\ccaGreme.s 			page 4


  79:main.c        ****         if (0u != USBUART_IsConfigurationChanged())
  73              		.loc 1 79 0
  74 0010 FFF7FEFF 		bl	USBUART_IsConfigurationChanged
  75 0014 0346     		mov	r3, r0
  76 0016 002B     		cmp	r3, #0
  77 0018 06D0     		beq	.L2
  80:main.c        ****         {
  81:main.c        ****             /* Initialize IN endpoints when device is configured. */
  82:main.c        ****             if (0u != USBUART_GetConfiguration())
  78              		.loc 1 82 0
  79 001a FFF7FEFF 		bl	USBUART_GetConfiguration
  80 001e 0346     		mov	r3, r0
  81 0020 002B     		cmp	r3, #0
  82 0022 01D0     		beq	.L2
  83:main.c        ****             {
  84:main.c        ****                 /* Enumeration is done, enable OUT endpoint to receive data 
  85:main.c        ****                  * from host. */
  86:main.c        ****                 USBUART_CDC_Init();
  83              		.loc 1 86 0
  84 0024 FFF7FEFF 		bl	USBUART_CDC_Init
  85              	.L2:
  87:main.c        ****             }
  88:main.c        ****         }
  89:main.c        **** 
  90:main.c        ****         /* Service USB CDC when device is configured. */
  91:main.c        ****         if (0u != USBUART_GetConfiguration())
  86              		.loc 1 91 0
  87 0028 FFF7FEFF 		bl	USBUART_GetConfiguration
  88 002c 0346     		mov	r3, r0
  89 002e 002B     		cmp	r3, #0
  90 0030 EED0     		beq	.L14
  92:main.c        ****         {
  93:main.c        ****             /* Check for input data from host. */
  94:main.c        ****             if (0u != USBUART_DataIsReady())
  91              		.loc 1 94 0
  92 0032 FFF7FEFF 		bl	USBUART_DataIsReady
  93 0036 0346     		mov	r3, r0
  94 0038 002B     		cmp	r3, #0
  95 003a E9D0     		beq	.L14
  95:main.c        ****             {
  96:main.c        ****                 /* Read received data and re-enable OUT endpoint. */
  97:main.c        ****                 inCount = USBUART_GetAll(inBuffer);
  96              		.loc 1 97 0
  97 003c 07F5A273 		add	r3, r7, #324
  98 0040 1846     		mov	r0, r3
  99 0042 FFF7FEFF 		bl	USBUART_GetAll
 100 0046 0346     		mov	r3, r0
 101 0048 A7F88631 		strh	r3, [r7, #390]	@ movhi
  98:main.c        **** 
  99:main.c        ****                 if (0u != inCount)
 102              		.loc 1 99 0
 103 004c B7F88631 		ldrh	r3, [r7, #390]
 104 0050 002B     		cmp	r3, #0
 105 0052 DDD0     		beq	.L14
 100:main.c        ****                 {
 101:main.c        ****                     /* Wait until component is ready to send data to host. */
 102:main.c        ****                     while (0u == USBUART_CDCIsReady());
ARM GAS  C:\Users\DGILLI~1\AppData\Local\Temp\ccaGreme.s 			page 5


 106              		.loc 1 102 0
 107 0054 00BF     		nop
 108              	.L4:
 109              		.loc 1 102 0 is_stmt 0 discriminator 1
 110 0056 FFF7FEFF 		bl	USBUART_CDCIsReady
 111 005a 0346     		mov	r3, r0
 112 005c 002B     		cmp	r3, #0
 113 005e FAD0     		beq	.L4
 103:main.c        ****                     if ((inBuffer[0] == 'r') || (inBuffer[0] == 'R'))
 114              		.loc 1 103 0 is_stmt 1
 115 0060 97F84431 		ldrb	r3, [r7, #324]	@ zero_extendqisi2
 116 0064 722B     		cmp	r3, #114
 117 0066 03D0     		beq	.L5
 118              		.loc 1 103 0 is_stmt 0 discriminator 1
 119 0068 97F84431 		ldrb	r3, [r7, #324]	@ zero_extendqisi2
 120 006c 522B     		cmp	r3, #82
 121 006e 2DD1     		bne	.L6
 122              	.L5:
 123              	.LBB2:
 104:main.c        ****                     {
 105:main.c        ****                         strcpy(outBuffer,"Read from the EEPROM\n\r");
 124              		.loc 1 105 0 is_stmt 1
 125 0070 07F58273 		add	r3, r7, #260
 126 0074 5F4A     		ldr	r2, .L15
 127 0076 1C46     		mov	r4, r3
 128 0078 1546     		mov	r5, r2
 129 007a 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 130 007c 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 131 007e 95E80300 		ldmia	r5, {r0, r1}
 132 0082 2060     		str	r0, [r4]
 133 0084 0434     		adds	r4, r4, #4
 134 0086 2180     		strh	r1, [r4]	@ movhi
 135 0088 0234     		adds	r4, r4, #2
 136 008a 0B0C     		lsrs	r3, r1, #16
 137 008c 2370     		strb	r3, [r4]
 106:main.c        ****                         outCount = strlen(outBuffer);
 138              		.loc 1 106 0
 139 008e 07F58273 		add	r3, r7, #260
 140 0092 1846     		mov	r0, r3
 141 0094 FFF7FEFF 		bl	strlen
 142 0098 0346     		mov	r3, r0
 143 009a A7F88431 		strh	r3, [r7, #388]	@ movhi
 107:main.c        ****                         USBUART_PutData(outBuffer, outCount);
 144              		.loc 1 107 0
 145 009e B7F88421 		ldrh	r2, [r7, #388]
 146 00a2 07F58273 		add	r3, r7, #260
 147 00a6 1146     		mov	r1, r2
 148 00a8 1846     		mov	r0, r3
 149 00aa FFF7FEFF 		bl	USBUART_PutData
 108:main.c        ****                         while (0u == USBUART_CDCIsReady());
 150              		.loc 1 108 0
 151 00ae 00BF     		nop
 152              	.L7:
 153              		.loc 1 108 0 is_stmt 0 discriminator 1
 154 00b0 FFF7FEFF 		bl	USBUART_CDCIsReady
 155 00b4 0346     		mov	r3, r0
 156 00b6 002B     		cmp	r3, #0
ARM GAS  C:\Users\DGILLI~1\AppData\Local\Temp\ccaGreme.s 			page 6


 157 00b8 FAD0     		beq	.L7
 109:main.c        ****                         readEEPROM(eepromBuffer);
 158              		.loc 1 109 0 is_stmt 1
 159 00ba 3B1D     		adds	r3, r7, #4
 160 00bc 1846     		mov	r0, r3
 161 00be FFF7FEFF 		bl	readEEPROM
 110:main.c        ****                         dumpEEPROM(eepromBuffer);
 162              		.loc 1 110 0
 163 00c2 3B1D     		adds	r3, r7, #4
 164 00c4 1846     		mov	r0, r3
 165 00c6 FFF7FEFF 		bl	dumpEEPROM
 166              	.LBE2:
 104:main.c        ****                         strcpy(outBuffer,"Read from the EEPROM\n\r");
 167              		.loc 1 104 0
 168 00ca 83E0     		b	.L8
 169              	.L6:
 111:main.c        ****                     }
 112:main.c        ****                     else if ((inBuffer[0] == 'w') || (inBuffer[0] == 'W'))
 170              		.loc 1 112 0
 171 00cc 97F84431 		ldrb	r3, [r7, #324]	@ zero_extendqisi2
 172 00d0 772B     		cmp	r3, #119
 173 00d2 03D0     		beq	.L9
 174              		.loc 1 112 0 is_stmt 0 discriminator 1
 175 00d4 97F84431 		ldrb	r3, [r7, #324]	@ zero_extendqisi2
 176 00d8 572B     		cmp	r3, #87
 177 00da 1CD1     		bne	.L10
 178              	.L9:
 113:main.c        ****                     {
 114:main.c        ****                         strcpy(outBuffer,"Write to the EEPROM\n\r");
 179              		.loc 1 114 0 is_stmt 1
 180 00dc 07F58273 		add	r3, r7, #260
 181 00e0 454A     		ldr	r2, .L15+4
 182 00e2 1C46     		mov	r4, r3
 183 00e4 1546     		mov	r5, r2
 184 00e6 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 185 00e8 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 186 00ea 95E80300 		ldmia	r5, {r0, r1}
 187 00ee 2060     		str	r0, [r4]
 188 00f0 0434     		adds	r4, r4, #4
 189 00f2 2180     		strh	r1, [r4]	@ movhi
 115:main.c        ****                         outCount = strlen(outBuffer);
 190              		.loc 1 115 0
 191 00f4 07F58273 		add	r3, r7, #260
 192 00f8 1846     		mov	r0, r3
 193 00fa FFF7FEFF 		bl	strlen
 194 00fe 0346     		mov	r3, r0
 195 0100 A7F88431 		strh	r3, [r7, #388]	@ movhi
 116:main.c        ****                         USBUART_PutData(outBuffer, outCount);
 196              		.loc 1 116 0
 197 0104 B7F88421 		ldrh	r2, [r7, #388]
 198 0108 07F58273 		add	r3, r7, #260
 199 010c 1146     		mov	r1, r2
 200 010e 1846     		mov	r0, r3
 201 0110 FFF7FEFF 		bl	USBUART_PutData
 202 0114 5EE0     		b	.L8
 203              	.L10:
 117:main.c        ****                     }
ARM GAS  C:\Users\DGILLI~1\AppData\Local\Temp\ccaGreme.s 			page 7


 118:main.c        ****                     else if ((inBuffer[0] == 'b') || (inBuffer[0] == 'B'))
 204              		.loc 1 118 0
 205 0116 97F84431 		ldrb	r3, [r7, #324]	@ zero_extendqisi2
 206 011a 622B     		cmp	r3, #98
 207 011c 03D0     		beq	.L11
 208              		.loc 1 118 0 is_stmt 0 discriminator 1
 209 011e 97F84431 		ldrb	r3, [r7, #324]	@ zero_extendqisi2
 210 0122 422B     		cmp	r3, #66
 211 0124 39D1     		bne	.L12
 212              	.L11:
 119:main.c        ****                     {
 120:main.c        ****                         strcpy(outBuffer,"Blinking the LEDs on the RPP-UIO-16 card, please wait\n\r
 213              		.loc 1 120 0 is_stmt 1
 214 0126 07F58273 		add	r3, r7, #260
 215 012a 344A     		ldr	r2, .L15+8
 216 012c 1C46     		mov	r4, r3
 217 012e 1546     		mov	r5, r2
 218 0130 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 219 0132 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 220 0134 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 221 0136 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 222 0138 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 223 013a 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 224 013c 95E80300 		ldmia	r5, {r0, r1}
 225 0140 84E80300 		stmia	r4, {r0, r1}
 121:main.c        ****                         outCount = strlen(outBuffer);
 226              		.loc 1 121 0
 227 0144 07F58273 		add	r3, r7, #260
 228 0148 1846     		mov	r0, r3
 229 014a FFF7FEFF 		bl	strlen
 230 014e 0346     		mov	r3, r0
 231 0150 A7F88431 		strh	r3, [r7, #388]	@ movhi
 122:main.c        ****                         USBUART_PutData(outBuffer, outCount);
 232              		.loc 1 122 0
 233 0154 B7F88421 		ldrh	r2, [r7, #388]
 234 0158 07F58273 		add	r3, r7, #260
 235 015c 1146     		mov	r1, r2
 236 015e 1846     		mov	r0, r3
 237 0160 FFF7FEFF 		bl	USBUART_PutData
 123:main.c        ****                         testRPPUIO16();
 238              		.loc 1 123 0
 239 0164 FFF7FEFF 		bl	testRPPUIO16
 124:main.c        ****                         strcpy(outBuffer,"Completed blinking the LEDs on the RPP-UIO-16 card\n\r");
 240              		.loc 1 124 0
 241 0168 07F58273 		add	r3, r7, #260
 242 016c 244A     		ldr	r2, .L15+12
 243 016e 1C46     		mov	r4, r3
 244 0170 1546     		mov	r5, r2
 245 0172 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 246 0174 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 247 0176 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 248 0178 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 249 017a 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 250 017c 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 251 017e 95E80300 		ldmia	r5, {r0, r1}
 252 0182 2060     		str	r0, [r4]
 253 0184 0434     		adds	r4, r4, #4
ARM GAS  C:\Users\DGILLI~1\AppData\Local\Temp\ccaGreme.s 			page 8


 254 0186 2170     		strb	r1, [r4]
 125:main.c        ****                         USBUART_PutData(outBuffer, outCount);
 255              		.loc 1 125 0
 256 0188 B7F88421 		ldrh	r2, [r7, #388]
 257 018c 07F58273 		add	r3, r7, #260
 258 0190 1146     		mov	r1, r2
 259 0192 1846     		mov	r0, r3
 260 0194 FFF7FEFF 		bl	USBUART_PutData
 261 0198 1CE0     		b	.L8
 262              	.L12:
 126:main.c        ****                     }
 127:main.c        ****                     else
 128:main.c        ****                     {
 129:main.c        ****                         strcpy(outBuffer,"Not a valid command, legal values are r, w, b\n\r");
 263              		.loc 1 129 0
 264 019a 07F58273 		add	r3, r7, #260
 265 019e 194A     		ldr	r2, .L15+16
 266 01a0 1C46     		mov	r4, r3
 267 01a2 1546     		mov	r5, r2
 268 01a4 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 269 01a6 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 270 01a8 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 271 01aa 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 272 01ac 95E80F00 		ldmia	r5, {r0, r1, r2, r3}
 273 01b0 84E80F00 		stmia	r4, {r0, r1, r2, r3}
 130:main.c        ****                         outCount = strlen(outBuffer);
 274              		.loc 1 130 0
 275 01b4 07F58273 		add	r3, r7, #260
 276 01b8 1846     		mov	r0, r3
 277 01ba FFF7FEFF 		bl	strlen
 278 01be 0346     		mov	r3, r0
 279 01c0 A7F88431 		strh	r3, [r7, #388]	@ movhi
 131:main.c        ****                         USBUART_PutData(outBuffer, outCount);
 280              		.loc 1 131 0
 281 01c4 B7F88421 		ldrh	r2, [r7, #388]
 282 01c8 07F58273 		add	r3, r7, #260
 283 01cc 1146     		mov	r1, r2
 284 01ce 1846     		mov	r0, r3
 285 01d0 FFF7FEFF 		bl	USBUART_PutData
 286              	.L8:
 132:main.c        ****                     }
 133:main.c        ****                     /* If the last sent packet is exactly the maximum packet 
 134:main.c        ****                     *  size, it is followed by a zero-length packet to assure
 135:main.c        ****                     *  that the end of the segment is properly identified by 
 136:main.c        ****                     *  the terminal.
 137:main.c        ****                     */
 138:main.c        ****                     if (USBUART_Buffer_SIZE == inCount)
 287              		.loc 1 138 0
 288 01d4 B7F88631 		ldrh	r3, [r7, #390]
 289 01d8 402B     		cmp	r3, #64
 290 01da 7FF419AF 		bne	.L14
 139:main.c        ****                     {
 140:main.c        ****                         /* Wait until component is ready to send data to PC. */
 141:main.c        ****                         while (0u == USBUART_CDCIsReady())
 291              		.loc 1 141 0
 292 01de 00BF     		nop
 293              	.L13:
ARM GAS  C:\Users\DGILLI~1\AppData\Local\Temp\ccaGreme.s 			page 9


 294              		.loc 1 141 0 is_stmt 0 discriminator 1
 295 01e0 FFF7FEFF 		bl	USBUART_CDCIsReady
 296 01e4 0346     		mov	r3, r0
 297 01e6 002B     		cmp	r3, #0
 298 01e8 FAD0     		beq	.L13
 142:main.c        ****                         {
 143:main.c        ****                         }
 144:main.c        **** 
 145:main.c        ****                         /* Send zero-length packet to PC. */
 146:main.c        ****                         USBUART_PutData(NULL, 0u);
 299              		.loc 1 146 0 is_stmt 1
 300 01ea 0021     		movs	r1, #0
 301 01ec 0020     		movs	r0, #0
 302 01ee FFF7FEFF 		bl	USBUART_PutData
 147:main.c        ****                     }
 148:main.c        ****                 }
 149:main.c        ****             }
 150:main.c        ****         }
 151:main.c        ****     }
 303              		.loc 1 151 0
 304 01f2 0DE7     		b	.L14
 305              	.L16:
 306              		.align	2
 307              	.L15:
 308 01f4 00000000 		.word	.LC0
 309 01f8 18000000 		.word	.LC1
 310 01fc 30000000 		.word	.LC2
 311 0200 68000000 		.word	.LC3
 312 0204 A0000000 		.word	.LC4
 313              		.cfi_endproc
 314              	.LFE64:
 315              		.size	main, .-main
 316              		.text
 317              	.Letext0:
 318              		.file 2 "c:\\program files (x86)\\cypress\\psoc creator\\4.2\\psoc creator\\import\\gnu\\arm\\5.4.
 319              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\4.2\\psoc creator\\import\\gnu\\arm\\5.4.
 320              		.file 4 "Generated_Source\\PSoC5/cytypes.h"
 321              		.file 5 "Generated_Source\\PSoC5/core_cm3.h"
 322              		.section	.debug_info,"",%progbits
 323              	.Ldebug_info0:
 324 0000 85010000 		.4byte	0x185
 325 0004 0400     		.2byte	0x4
 326 0006 00000000 		.4byte	.Ldebug_abbrev0
 327 000a 04       		.byte	0x4
 328 000b 01       		.uleb128 0x1
 329 000c 00000000 		.4byte	.LASF23
 330 0010 0C       		.byte	0xc
 331 0011 C6010000 		.4byte	.LASF24
 332 0015 A3000000 		.4byte	.LASF25
 333 0019 00000000 		.4byte	.Ldebug_ranges0+0
 334 001d 00000000 		.4byte	0
 335 0021 00000000 		.4byte	.Ldebug_line0
 336 0025 02       		.uleb128 0x2
 337 0026 01       		.byte	0x1
 338 0027 06       		.byte	0x6
 339 0028 F7010000 		.4byte	.LASF0
 340 002c 02       		.uleb128 0x2
ARM GAS  C:\Users\DGILLI~1\AppData\Local\Temp\ccaGreme.s 			page 10


 341 002d 01       		.byte	0x1
 342 002e 08       		.byte	0x8
 343 002f 06010000 		.4byte	.LASF1
 344 0033 02       		.uleb128 0x2
 345 0034 02       		.byte	0x2
 346 0035 05       		.byte	0x5
 347 0036 D2010000 		.4byte	.LASF2
 348 003a 02       		.uleb128 0x2
 349 003b 02       		.byte	0x2
 350 003c 07       		.byte	0x7
 351 003d 26010000 		.4byte	.LASF3
 352 0041 03       		.uleb128 0x3
 353 0042 8E000000 		.4byte	.LASF9
 354 0046 02       		.byte	0x2
 355 0047 3F       		.byte	0x3f
 356 0048 4C000000 		.4byte	0x4c
 357 004c 02       		.uleb128 0x2
 358 004d 04       		.byte	0x4
 359 004e 05       		.byte	0x5
 360 004f E2010000 		.4byte	.LASF4
 361 0053 02       		.uleb128 0x2
 362 0054 04       		.byte	0x4
 363 0055 07       		.byte	0x7
 364 0056 14010000 		.4byte	.LASF5
 365 005a 02       		.uleb128 0x2
 366 005b 08       		.byte	0x8
 367 005c 05       		.byte	0x5
 368 005d B8010000 		.4byte	.LASF6
 369 0061 02       		.uleb128 0x2
 370 0062 08       		.byte	0x8
 371 0063 07       		.byte	0x7
 372 0064 7B010000 		.4byte	.LASF7
 373 0068 04       		.uleb128 0x4
 374 0069 04       		.byte	0x4
 375 006a 05       		.byte	0x5
 376 006b 696E7400 		.ascii	"int\000"
 377 006f 02       		.uleb128 0x2
 378 0070 04       		.byte	0x4
 379 0071 07       		.byte	0x7
 380 0072 6E010000 		.4byte	.LASF8
 381 0076 03       		.uleb128 0x3
 382 0077 9A010000 		.4byte	.LASF10
 383 007b 03       		.byte	0x3
 384 007c 2C       		.byte	0x2c
 385 007d 41000000 		.4byte	0x41
 386 0081 05       		.uleb128 0x5
 387 0082 DC010000 		.4byte	.LASF11
 388 0086 04       		.byte	0x4
 389 0087 E401     		.2byte	0x1e4
 390 0089 2C000000 		.4byte	0x2c
 391 008d 05       		.uleb128 0x5
 392 008e 52010000 		.4byte	.LASF12
 393 0092 04       		.byte	0x4
 394 0093 E501     		.2byte	0x1e5
 395 0095 3A000000 		.4byte	0x3a
 396 0099 02       		.uleb128 0x2
 397 009a 04       		.byte	0x4
ARM GAS  C:\Users\DGILLI~1\AppData\Local\Temp\ccaGreme.s 			page 11


 398 009b 04       		.byte	0x4
 399 009c 00010000 		.4byte	.LASF13
 400 00a0 02       		.uleb128 0x2
 401 00a1 08       		.byte	0x8
 402 00a2 04       		.byte	0x4
 403 00a3 46010000 		.4byte	.LASF14
 404 00a7 02       		.uleb128 0x2
 405 00a8 01       		.byte	0x1
 406 00a9 08       		.byte	0x8
 407 00aa CD010000 		.4byte	.LASF15
 408 00ae 02       		.uleb128 0x2
 409 00af 08       		.byte	0x8
 410 00b0 04       		.byte	0x4
 411 00b1 EB010000 		.4byte	.LASF16
 412 00b5 02       		.uleb128 0x2
 413 00b6 04       		.byte	0x4
 414 00b7 07       		.byte	0x7
 415 00b8 A2010000 		.4byte	.LASF17
 416 00bc 06       		.uleb128 0x6
 417 00bd 4D010000 		.4byte	.LASF26
 418 00c1 01       		.byte	0x1
 419 00c2 3F       		.byte	0x3f
 420 00c3 68000000 		.4byte	0x68
 421 00c7 00000000 		.4byte	.LFB64
 422 00cb 08020000 		.4byte	.LFE64-.LFB64
 423 00cf 01       		.uleb128 0x1
 424 00d0 9C       		.byte	0x9c
 425 00d1 47010000 		.4byte	0x147
 426 00d5 07       		.uleb128 0x7
 427 00d6 92010000 		.4byte	.LASF18
 428 00da 01       		.byte	0x1
 429 00db 41       		.byte	0x41
 430 00dc 8D000000 		.4byte	0x8d
 431 00e0 02       		.uleb128 0x2
 432 00e1 91       		.byte	0x91
 433 00e2 6E       		.sleb128 -18
 434 00e3 07       		.uleb128 0x7
 435 00e4 03020000 		.4byte	.LASF19
 436 00e8 01       		.byte	0x1
 437 00e9 42       		.byte	0x42
 438 00ea 8D000000 		.4byte	0x8d
 439 00ee 02       		.uleb128 0x2
 440 00ef 91       		.byte	0x91
 441 00f0 6C       		.sleb128 -20
 442 00f1 07       		.uleb128 0x7
 443 00f2 0C020000 		.4byte	.LASF20
 444 00f6 01       		.byte	0x1
 445 00f7 43       		.byte	0x43
 446 00f8 47010000 		.4byte	0x147
 447 00fc 03       		.uleb128 0x3
 448 00fd 91       		.byte	0x91
 449 00fe AC7F     		.sleb128 -84
 450 0100 07       		.uleb128 0x7
 451 0101 64010000 		.4byte	.LASF21
 452 0105 01       		.byte	0x1
 453 0106 44       		.byte	0x44
 454 0107 57010000 		.4byte	0x157
ARM GAS  C:\Users\DGILLI~1\AppData\Local\Temp\ccaGreme.s 			page 12


 455 010b 03       		.uleb128 0x3
 456 010c 91       		.byte	0x91
 457 010d EC7E     		.sleb128 -148
 458 010f 07       		.uleb128 0x7
 459 0110 AB010000 		.4byte	.LASF22
 460 0114 01       		.byte	0x1
 461 0115 45       		.byte	0x45
 462 0116 67010000 		.4byte	0x167
 463 011a 03       		.uleb128 0x3
 464 011b 91       		.byte	0x91
 465 011c EC7C     		.sleb128 -404
 466 011e 08       		.uleb128 0x8
 467 011f 70000000 		.4byte	.LBB2
 468 0123 5A000000 		.4byte	.LBE2-.LBB2
 469 0127 09       		.uleb128 0x9
 470 0128 98000000 		.4byte	.LASF27
 471 012c 01       		.byte	0x1
 472 012d 6D       		.byte	0x6d
 473 012e 68000000 		.4byte	0x68
 474 0132 38010000 		.4byte	0x138
 475 0136 0A       		.uleb128 0xa
 476 0137 00       		.byte	0
 477 0138 0B       		.uleb128 0xb
 478 0139 59010000 		.4byte	.LASF28
 479 013d 01       		.byte	0x1
 480 013e 6E       		.byte	0x6e
 481 013f 68000000 		.4byte	0x68
 482 0143 0A       		.uleb128 0xa
 483 0144 00       		.byte	0
 484 0145 00       		.byte	0
 485 0146 00       		.byte	0
 486 0147 0C       		.uleb128 0xc
 487 0148 81000000 		.4byte	0x81
 488 014c 57010000 		.4byte	0x157
 489 0150 0D       		.uleb128 0xd
 490 0151 B5000000 		.4byte	0xb5
 491 0155 3F       		.byte	0x3f
 492 0156 00       		.byte	0
 493 0157 0C       		.uleb128 0xc
 494 0158 A7000000 		.4byte	0xa7
 495 015c 67010000 		.4byte	0x167
 496 0160 0D       		.uleb128 0xd
 497 0161 B5000000 		.4byte	0xb5
 498 0165 3F       		.byte	0x3f
 499 0166 00       		.byte	0
 500 0167 0C       		.uleb128 0xc
 501 0168 A7000000 		.4byte	0xa7
 502 016c 77010000 		.4byte	0x177
 503 0170 0D       		.uleb128 0xd
 504 0171 B5000000 		.4byte	0xb5
 505 0175 FF       		.byte	0xff
 506 0176 00       		.byte	0
 507 0177 0E       		.uleb128 0xe
 508 0178 39010000 		.4byte	.LASF29
 509 017c 05       		.byte	0x5
 510 017d 1207     		.2byte	0x712
 511 017f 83010000 		.4byte	0x183
ARM GAS  C:\Users\DGILLI~1\AppData\Local\Temp\ccaGreme.s 			page 13


 512 0183 0F       		.uleb128 0xf
 513 0184 76000000 		.4byte	0x76
 514 0188 00       		.byte	0
 515              		.section	.debug_abbrev,"",%progbits
 516              	.Ldebug_abbrev0:
 517 0000 01       		.uleb128 0x1
 518 0001 11       		.uleb128 0x11
 519 0002 01       		.byte	0x1
 520 0003 25       		.uleb128 0x25
 521 0004 0E       		.uleb128 0xe
 522 0005 13       		.uleb128 0x13
 523 0006 0B       		.uleb128 0xb
 524 0007 03       		.uleb128 0x3
 525 0008 0E       		.uleb128 0xe
 526 0009 1B       		.uleb128 0x1b
 527 000a 0E       		.uleb128 0xe
 528 000b 55       		.uleb128 0x55
 529 000c 17       		.uleb128 0x17
 530 000d 11       		.uleb128 0x11
 531 000e 01       		.uleb128 0x1
 532 000f 10       		.uleb128 0x10
 533 0010 17       		.uleb128 0x17
 534 0011 00       		.byte	0
 535 0012 00       		.byte	0
 536 0013 02       		.uleb128 0x2
 537 0014 24       		.uleb128 0x24
 538 0015 00       		.byte	0
 539 0016 0B       		.uleb128 0xb
 540 0017 0B       		.uleb128 0xb
 541 0018 3E       		.uleb128 0x3e
 542 0019 0B       		.uleb128 0xb
 543 001a 03       		.uleb128 0x3
 544 001b 0E       		.uleb128 0xe
 545 001c 00       		.byte	0
 546 001d 00       		.byte	0
 547 001e 03       		.uleb128 0x3
 548 001f 16       		.uleb128 0x16
 549 0020 00       		.byte	0
 550 0021 03       		.uleb128 0x3
 551 0022 0E       		.uleb128 0xe
 552 0023 3A       		.uleb128 0x3a
 553 0024 0B       		.uleb128 0xb
 554 0025 3B       		.uleb128 0x3b
 555 0026 0B       		.uleb128 0xb
 556 0027 49       		.uleb128 0x49
 557 0028 13       		.uleb128 0x13
 558 0029 00       		.byte	0
 559 002a 00       		.byte	0
 560 002b 04       		.uleb128 0x4
 561 002c 24       		.uleb128 0x24
 562 002d 00       		.byte	0
 563 002e 0B       		.uleb128 0xb
 564 002f 0B       		.uleb128 0xb
 565 0030 3E       		.uleb128 0x3e
 566 0031 0B       		.uleb128 0xb
 567 0032 03       		.uleb128 0x3
 568 0033 08       		.uleb128 0x8
ARM GAS  C:\Users\DGILLI~1\AppData\Local\Temp\ccaGreme.s 			page 14


 569 0034 00       		.byte	0
 570 0035 00       		.byte	0
 571 0036 05       		.uleb128 0x5
 572 0037 16       		.uleb128 0x16
 573 0038 00       		.byte	0
 574 0039 03       		.uleb128 0x3
 575 003a 0E       		.uleb128 0xe
 576 003b 3A       		.uleb128 0x3a
 577 003c 0B       		.uleb128 0xb
 578 003d 3B       		.uleb128 0x3b
 579 003e 05       		.uleb128 0x5
 580 003f 49       		.uleb128 0x49
 581 0040 13       		.uleb128 0x13
 582 0041 00       		.byte	0
 583 0042 00       		.byte	0
 584 0043 06       		.uleb128 0x6
 585 0044 2E       		.uleb128 0x2e
 586 0045 01       		.byte	0x1
 587 0046 3F       		.uleb128 0x3f
 588 0047 19       		.uleb128 0x19
 589 0048 03       		.uleb128 0x3
 590 0049 0E       		.uleb128 0xe
 591 004a 3A       		.uleb128 0x3a
 592 004b 0B       		.uleb128 0xb
 593 004c 3B       		.uleb128 0x3b
 594 004d 0B       		.uleb128 0xb
 595 004e 49       		.uleb128 0x49
 596 004f 13       		.uleb128 0x13
 597 0050 11       		.uleb128 0x11
 598 0051 01       		.uleb128 0x1
 599 0052 12       		.uleb128 0x12
 600 0053 06       		.uleb128 0x6
 601 0054 40       		.uleb128 0x40
 602 0055 18       		.uleb128 0x18
 603 0056 9642     		.uleb128 0x2116
 604 0058 19       		.uleb128 0x19
 605 0059 01       		.uleb128 0x1
 606 005a 13       		.uleb128 0x13
 607 005b 00       		.byte	0
 608 005c 00       		.byte	0
 609 005d 07       		.uleb128 0x7
 610 005e 34       		.uleb128 0x34
 611 005f 00       		.byte	0
 612 0060 03       		.uleb128 0x3
 613 0061 0E       		.uleb128 0xe
 614 0062 3A       		.uleb128 0x3a
 615 0063 0B       		.uleb128 0xb
 616 0064 3B       		.uleb128 0x3b
 617 0065 0B       		.uleb128 0xb
 618 0066 49       		.uleb128 0x49
 619 0067 13       		.uleb128 0x13
 620 0068 02       		.uleb128 0x2
 621 0069 18       		.uleb128 0x18
 622 006a 00       		.byte	0
 623 006b 00       		.byte	0
 624 006c 08       		.uleb128 0x8
 625 006d 0B       		.uleb128 0xb
ARM GAS  C:\Users\DGILLI~1\AppData\Local\Temp\ccaGreme.s 			page 15


 626 006e 01       		.byte	0x1
 627 006f 11       		.uleb128 0x11
 628 0070 01       		.uleb128 0x1
 629 0071 12       		.uleb128 0x12
 630 0072 06       		.uleb128 0x6
 631 0073 00       		.byte	0
 632 0074 00       		.byte	0
 633 0075 09       		.uleb128 0x9
 634 0076 2E       		.uleb128 0x2e
 635 0077 01       		.byte	0x1
 636 0078 3F       		.uleb128 0x3f
 637 0079 19       		.uleb128 0x19
 638 007a 03       		.uleb128 0x3
 639 007b 0E       		.uleb128 0xe
 640 007c 3A       		.uleb128 0x3a
 641 007d 0B       		.uleb128 0xb
 642 007e 3B       		.uleb128 0x3b
 643 007f 0B       		.uleb128 0xb
 644 0080 49       		.uleb128 0x49
 645 0081 13       		.uleb128 0x13
 646 0082 3C       		.uleb128 0x3c
 647 0083 19       		.uleb128 0x19
 648 0084 01       		.uleb128 0x1
 649 0085 13       		.uleb128 0x13
 650 0086 00       		.byte	0
 651 0087 00       		.byte	0
 652 0088 0A       		.uleb128 0xa
 653 0089 18       		.uleb128 0x18
 654 008a 00       		.byte	0
 655 008b 00       		.byte	0
 656 008c 00       		.byte	0
 657 008d 0B       		.uleb128 0xb
 658 008e 2E       		.uleb128 0x2e
 659 008f 01       		.byte	0x1
 660 0090 3F       		.uleb128 0x3f
 661 0091 19       		.uleb128 0x19
 662 0092 03       		.uleb128 0x3
 663 0093 0E       		.uleb128 0xe
 664 0094 3A       		.uleb128 0x3a
 665 0095 0B       		.uleb128 0xb
 666 0096 3B       		.uleb128 0x3b
 667 0097 0B       		.uleb128 0xb
 668 0098 49       		.uleb128 0x49
 669 0099 13       		.uleb128 0x13
 670 009a 3C       		.uleb128 0x3c
 671 009b 19       		.uleb128 0x19
 672 009c 00       		.byte	0
 673 009d 00       		.byte	0
 674 009e 0C       		.uleb128 0xc
 675 009f 01       		.uleb128 0x1
 676 00a0 01       		.byte	0x1
 677 00a1 49       		.uleb128 0x49
 678 00a2 13       		.uleb128 0x13
 679 00a3 01       		.uleb128 0x1
 680 00a4 13       		.uleb128 0x13
 681 00a5 00       		.byte	0
 682 00a6 00       		.byte	0
ARM GAS  C:\Users\DGILLI~1\AppData\Local\Temp\ccaGreme.s 			page 16


 683 00a7 0D       		.uleb128 0xd
 684 00a8 21       		.uleb128 0x21
 685 00a9 00       		.byte	0
 686 00aa 49       		.uleb128 0x49
 687 00ab 13       		.uleb128 0x13
 688 00ac 2F       		.uleb128 0x2f
 689 00ad 0B       		.uleb128 0xb
 690 00ae 00       		.byte	0
 691 00af 00       		.byte	0
 692 00b0 0E       		.uleb128 0xe
 693 00b1 34       		.uleb128 0x34
 694 00b2 00       		.byte	0
 695 00b3 03       		.uleb128 0x3
 696 00b4 0E       		.uleb128 0xe
 697 00b5 3A       		.uleb128 0x3a
 698 00b6 0B       		.uleb128 0xb
 699 00b7 3B       		.uleb128 0x3b
 700 00b8 05       		.uleb128 0x5
 701 00b9 49       		.uleb128 0x49
 702 00ba 13       		.uleb128 0x13
 703 00bb 3F       		.uleb128 0x3f
 704 00bc 19       		.uleb128 0x19
 705 00bd 3C       		.uleb128 0x3c
 706 00be 19       		.uleb128 0x19
 707 00bf 00       		.byte	0
 708 00c0 00       		.byte	0
 709 00c1 0F       		.uleb128 0xf
 710 00c2 35       		.uleb128 0x35
 711 00c3 00       		.byte	0
 712 00c4 49       		.uleb128 0x49
 713 00c5 13       		.uleb128 0x13
 714 00c6 00       		.byte	0
 715 00c7 00       		.byte	0
 716 00c8 00       		.byte	0
 717              		.section	.debug_aranges,"",%progbits
 718 0000 1C000000 		.4byte	0x1c
 719 0004 0200     		.2byte	0x2
 720 0006 00000000 		.4byte	.Ldebug_info0
 721 000a 04       		.byte	0x4
 722 000b 00       		.byte	0
 723 000c 0000     		.2byte	0
 724 000e 0000     		.2byte	0
 725 0010 00000000 		.4byte	.LFB64
 726 0014 08020000 		.4byte	.LFE64-.LFB64
 727 0018 00000000 		.4byte	0
 728 001c 00000000 		.4byte	0
 729              		.section	.debug_ranges,"",%progbits
 730              	.Ldebug_ranges0:
 731 0000 00000000 		.4byte	.LFB64
 732 0004 08020000 		.4byte	.LFE64
 733 0008 00000000 		.4byte	0
 734 000c 00000000 		.4byte	0
 735              		.section	.debug_line,"",%progbits
 736              	.Ldebug_line0:
 737 0000 B1010000 		.section	.debug_str,"MS",%progbits,1
 737      02004C01 
 737      00000201 
ARM GAS  C:\Users\DGILLI~1\AppData\Local\Temp\ccaGreme.s 			page 17


 737      FB0E0D00 
 737      01010101 
 738              	.LASF23:
 739 0000 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 739      43313120 
 739      352E342E 
 739      31203230 
 739      31363036 
 740 0033 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m3 -mthumb -g -O"
 740      20726576 
 740      6973696F 
 740      6E203233 
 740      37373135 
 741 0066 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 741      66756E63 
 741      74696F6E 
 741      2D736563 
 741      74696F6E 
 742              	.LASF9:
 743 008e 5F5F696E 		.ascii	"__int32_t\000"
 743      7433325F 
 743      7400
 744              	.LASF27:
 745 0098 72656164 		.ascii	"readEEPROM\000"
 745      45455052 
 745      4F4D00
 746              	.LASF25:
 747 00a3 433A5C55 		.ascii	"C:\\Users\\dgilliland\\Documents\\GitHub\\RPI_PSOC5"
 747      73657273 
 747      5C646769 
 747      6C6C696C 
 747      616E645C 
 748 00d1 5C525049 		.ascii	"\\RPI_PSOC5_Serial_01\\RPS_PSOC5_Serial_01.cydsn\000"
 748      5F50534F 
 748      43355F53 
 748      65726961 
 748      6C5F3031 
 749              	.LASF13:
 750 0100 666C6F61 		.ascii	"float\000"
 750      7400
 751              	.LASF1:
 752 0106 756E7369 		.ascii	"unsigned char\000"
 752      676E6564 
 752      20636861 
 752      7200
 753              	.LASF5:
 754 0114 6C6F6E67 		.ascii	"long unsigned int\000"
 754      20756E73 
 754      69676E65 
 754      6420696E 
 754      7400
 755              	.LASF3:
 756 0126 73686F72 		.ascii	"short unsigned int\000"
 756      7420756E 
 756      7369676E 
 756      65642069 
 756      6E7400
ARM GAS  C:\Users\DGILLI~1\AppData\Local\Temp\ccaGreme.s 			page 18


 757              	.LASF29:
 758 0139 49544D5F 		.ascii	"ITM_RxBuffer\000"
 758      52784275 
 758      66666572 
 758      00
 759              	.LASF14:
 760 0146 646F7562 		.ascii	"double\000"
 760      6C6500
 761              	.LASF26:
 762 014d 6D61696E 		.ascii	"main\000"
 762      00
 763              	.LASF12:
 764 0152 75696E74 		.ascii	"uint16\000"
 764      313600
 765              	.LASF28:
 766 0159 64756D70 		.ascii	"dumpEEPROM\000"
 766      45455052 
 766      4F4D00
 767              	.LASF21:
 768 0164 6F757442 		.ascii	"outBuffer\000"
 768      75666665 
 768      7200
 769              	.LASF8:
 770 016e 756E7369 		.ascii	"unsigned int\000"
 770      676E6564 
 770      20696E74 
 770      00
 771              	.LASF7:
 772 017b 6C6F6E67 		.ascii	"long long unsigned int\000"
 772      206C6F6E 
 772      6720756E 
 772      7369676E 
 772      65642069 
 773              	.LASF18:
 774 0192 696E436F 		.ascii	"inCount\000"
 774      756E7400 
 775              	.LASF10:
 776 019a 696E7433 		.ascii	"int32_t\000"
 776      325F7400 
 777              	.LASF17:
 778 01a2 73697A65 		.ascii	"sizetype\000"
 778      74797065 
 778      00
 779              	.LASF22:
 780 01ab 65657072 		.ascii	"eepromBuffer\000"
 780      6F6D4275 
 780      66666572 
 780      00
 781              	.LASF6:
 782 01b8 6C6F6E67 		.ascii	"long long int\000"
 782      206C6F6E 
 782      6720696E 
 782      7400
 783              	.LASF24:
 784 01c6 6D61696E 		.ascii	"main.c\000"
 784      2E6300
 785              	.LASF15:
ARM GAS  C:\Users\DGILLI~1\AppData\Local\Temp\ccaGreme.s 			page 19


 786 01cd 63686172 		.ascii	"char\000"
 786      00
 787              	.LASF2:
 788 01d2 73686F72 		.ascii	"short int\000"
 788      7420696E 
 788      7400
 789              	.LASF11:
 790 01dc 75696E74 		.ascii	"uint8\000"
 790      3800
 791              	.LASF4:
 792 01e2 6C6F6E67 		.ascii	"long int\000"
 792      20696E74 
 792      00
 793              	.LASF16:
 794 01eb 6C6F6E67 		.ascii	"long double\000"
 794      20646F75 
 794      626C6500 
 795              	.LASF0:
 796 01f7 7369676E 		.ascii	"signed char\000"
 796      65642063 
 796      68617200 
 797              	.LASF19:
 798 0203 6F757443 		.ascii	"outCount\000"
 798      6F756E74 
 798      00
 799              	.LASF20:
 800 020c 696E4275 		.ascii	"inBuffer\000"
 800      66666572 
 800      00
 801              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
