C51 COMPILER V8.16   CYFLASH                                                               12/13/2010 22:57:35 PAGE 1   


C51 COMPILER V8.16, COMPILATION OF MODULE CYFLASH
OBJECT MODULE PLACED IN C:/Documents and Settings/akay/My Documents/Example Projects/PSoC3 I2C EEPROM/Example_I2C_EEPROM/Example_I2C_EEPROM.cydsn/DP8051_Keil_816/Debug/CyFlash.OBJ
COMPILER INVOKED BY: C:\Program Files\Cypress\PSoC Creator\1.0\PSoC Creator\import\keil\pk51\8.16\C51\BIN\c51.exe C:\Doc
                    -uments and Settings\akay\My Documents\Example Projects\PSoC3 I2C EEPROM\Example_I2C_EEPROM\Example_I2C_EEPROM.cydsn\Gene
                    -rated_Source\PSoC3\CyFlash.c NOIV LARGE MODDP2 OMF2 VB(1) PR(C:/Documents and Settings/akay/My Documents/Example Project
                    -s/PSoC3 I2C EEPROM/Example_I2C_EEPROM/Example_I2C_EEPROM.cydsn/DP8051_Keil_816/Debug/CyFlash.lst) DB NOIP OT(0) INCDIR(G
                    -enerated_Source/PSoC3) OJ(C:/Documents and Settings/akay/My Documents/Example Projects/PSoC3 I2C EEPROM/Example_I2C_EEPR
                    -OM/Example_I2C_EEPROM.cydsn/DP8051_Keil_816/Debug/CyFlash.OBJ)

line level    source

   1          /*******************************************************************************
   2          * File Name: CyFlash.c  
   3          * Version 2.0
   4          *
   5          *  Description:
   6          *   Provides an API for the FLASH/EEPROM.
   7          *
   8          *  Note:
   9          *   This code is endian agnostic.
  10          *
  11          *  Note: 
  12          *   Documentation of the API's in this file is located in the
  13          *   System Reference Guide provided with PSoC Creator.
  14          *
  15          *******************************************************************************
  16          * Copyright 2008-2010, Cypress Semiconductor Corporation.  All rights reserved.
  17          * You may use this file only in accordance with the license, terms, conditions, 
  18          * disclaimers, and limitations in the end user license agreement accompanying 
  19          * the software package with which this file was provided.
  20          ********************************************************************************/
  21          
  22          #include <Cydevice_trm.h>
  23          #include "CYFLASH.H"
  24          
  25          uint8 dieTemperature[2];
  26          
  27          #if (CYDEV_ECC_ENABLE == 0)
  28              static uint8 * rowBuffer = 0;
  29          #endif
  30          
  31          
  32          /*******************************************************************************
  33          * Function Name: CyFlash_Start
  34          ********************************************************************************
  35          *
  36          * Summary:
  37          *  Enable the EEPROM/Flash. In PSOC3_ES2/PSOC5_ES1, this will enable both
  38          *  Flash and EEPROM. In PSOC3_ES3/PSOC5_ES2, this will enable only Flash.
  39          *   
  40          * Parameters:
  41          *  void
  42          * 
  43          * Return:
  44          *  void  
  45          * 
  46          * Reentrant
  47          *  No
  48          *
  49          *******************************************************************************/
  50          void CyFlash_Start(void) 
C51 COMPILER V8.16   CYFLASH                                                               12/13/2010 22:57:35 PAGE 2   

  51          {
  52   1          #if (PSOC3_ES2 || PSOC5_ES1)
  53   1              /* Active Power Mode */
  54   1              *PM_ACT_EEFLASH |= PM_FLASH_EE_MASK;
  55   1              /* Standby Power Mode */
  56   1              *PM_STBY_EEFLASH |= PM_FLASH_EE_MASK;
  57   1          #endif
  58   1          
  59   1          #if (PSOC3_ES3 || PSOC5_ES2)
                      /* Active Power Mode */
                      *PM_ACT_FLASH_PTR |= PM_FLASH_MASK;
                      /* Standby Power Mode */
                      *PM_STBY_FLASH_PTR |= PM_FLASH_MASK;
                  #endif
  65   1      }
  66          
  67          
  68          /*******************************************************************************
  69          * Function Name: CyFlash_Stop
  70          ********************************************************************************
  71          *
  72          * Summary:
  73          *  Disable the EEPROM/Flash. In PSOC3_ES2/PSOC5_ES1, this will disable both
  74          *  Flash and EEPROM. In PSOC3_ES3/PSOC5_ES2, this will disable only Flash.
  75          *
  76          * Parameters:
  77          *  void
  78          *
  79          * Return:
  80          *  void  
  81          * 
  82          * Side Effects:
  83          *  This setting is ignored as long as the CPU is currently running.  This will 
  84          *  only take effect when the CPU is later disabled.
  85          *
  86          * Reentrant
  87          *  Yes
  88          *
  89          *******************************************************************************/
  90          void CyFlash_Stop (void) 
  91          {
  92   1          #if (PSOC3_ES2 || PSOC5_ES1)
  93   1              /* Active Power Mode */
  94   1              *PM_ACT_EEFLASH &= ~PM_FLASH_EE_MASK;
  95   1              /* Standby Power Mode */
  96   1              *PM_STBY_EEFLASH &= ~PM_FLASH_EE_MASK;
  97   1          #endif
  98   1          
  99   1          #if (PSOC3_ES3 || PSOC5_ES2)
                      /* Active Power Mode */
                      *PM_ACT_FLASH_PTR &= ~PM_FLASH_MASK;
                      /* Standby Power Mode */
                      *PM_STBY_FLASH_PTR &= ~PM_FLASH_MASK;
                  #endif
 105   1      }
 106          
 107          
 108          /*******************************************************************************
 109          * Function Name: CySetTemp
 110          ********************************************************************************
 111          *
 112          * Summary:
C51 COMPILER V8.16   CYFLASH                                                               12/13/2010 22:57:35 PAGE 3   

 113          *  Sends a command to the SPC to read the die temperature. Sets a global value
 114          *  used by the Write functions. This function must be called once before executing
 115          *  a series of Flash writing functions.
 116          
 117          *
 118          * Parameters:
 119          *  void
 120          *
 121          * Return:
 122          *  status:
 123          *   CYRET_SUCCESS if successful. The first byte is the sign of the temperature 
 124          *   (0 = negative, 1 = positive).
 125          *   The second byte is the magnitude.
 126          *   CYRET_LOCKED if Flash writing already in use
 127          *   CYRET_UNKNOWN if there was an SPC error.
 128          *  
 129          * Side Effects:
 130          *  Execution of this function takes an extended period of time.
 131          *
 132          * Reentrant
 133          *  Yes
 134          *
 135          *******************************************************************************/
 136          cystatus CySetTemp(void) 
 137          {
 138   1          uint8 ticks;
 139   1          cystatus status;
 140   1      
 141   1          /* Make sure SPC is powered. */
 142   1          CySpcActivePower(1);
 143   1      
 144   1          /* Plan for failure. */
 145   1          status = CYRET_UNKNOWN;
 146   1      
 147   1          /* See if we can get the SPC. */
 148   1          if(CySpcLock() == CYRET_SUCCESS)
 149   1          {
 150   2              /* Create the command. */
 151   2              if(CySpcCreateCmdGetTemp(TEMP_NUMBER_OF_SAMPLES, TEMP_TIMER_PERIOD, TEMP_CLK_DIV_SELECT) == CYRET_
             -SUCCESS)
 152   2              {
 153   3                  /* Write the command. */
 154   3                  if(CySpcWriteCommand(0, 0) == CYRET_STARTED)
 155   3                  {
 156   4                      ticks = (uint8) TEMP_MAX_WAIT;
 157   4      
 158   4                      do
 159   4                      {
 160   5                          if(CySpcReadData(dieTemperature, 2) == 2)
 161   5                          {
 162   6                              status = CYRET_SUCCESS;
 163   6                              break;
 164   6                          }
 165   5                          
 166   5                          /* Wait for the reading to come in. */
 167   5                          CyDelay(1);
 168   5                          ticks--;
 169   5      
 170   5                      } while(ticks && !(*SPC_STATUS & SPC_SPC_IDLE));
 171   4                  }
 172   3              }
 173   2      
C51 COMPILER V8.16   CYFLASH                                                               12/13/2010 22:57:35 PAGE 4   

 174   2              /* Unlock the SPC so someone else can use it. */
 175   2              CySpcUnlock();
 176   2          }
 177   1          else
 178   1          {
 179   2              status = CYRET_LOCKED;
 180   2          }
 181   1      
 182   1          return status;
 183   1      }
 184          
 185          
 186          /*******************************************************************************
 187          * Function Name: CySetFlashEEBuffer
 188          ********************************************************************************
 189          *
 190          * Summary:
 191          *  Sets the user supplied temporary buffer to store SPC data while performing
 192          *  flash and EEPROM commands. This buffer is only necessary when Flash ECC is 
 193          *  disabled.
 194          *
 195          *
 196          * Parameters:
 197          *  buffer:
 198          *       Address of block of memory to store temporary memory. The size of the
 199          *       block of memory is SIZEOF_FLASH_ROW + SIZEOF_ECC_ROW.
 200          *   
 201          * Return:
 202          *  status:
 203          *   CYRET_SUCCESS if successful.
 204          *   CYRET_LOCKED if the SPC is already in use.
 205          *
 206          * Reentrant
 207          *  Yes
 208          *
 209          *******************************************************************************/
 210          cystatus CySetFlashEEBuffer(uint8 * buffer) 
 211          {
 212   1          cystatus status;
 213   1      
 214   1          /* Make sure SPC is powerd. */
 215   1          CySpcActivePower(1);
 216   1      
 217   1          if(!buffer)
 218   1          {
 219   2              status = CYRET_BAD_PARAM;
 220   2          }
 221   1          /* See if we can get the SPC. */
 222   1          else if(CySpcLock() != CYRET_SUCCESS)
 223   1          {
 224   2              status = CYRET_LOCKED;
 225   2          }
 226   1          else
 227   1          {
 228   2              #if (CYDEV_ECC_ENABLE == 0)
 229   2                  rowBuffer = buffer;
 230   2              #endif
 231   2              status = CYRET_SUCCESS;
 232   2      
 233   2              /* Unlock the SPC so someone else can use it. */
 234   2              CySpcUnlock();
 235   2          }
C51 COMPILER V8.16   CYFLASH                                                               12/13/2010 22:57:35 PAGE 5   

 236   1      
 237   1          return status;
 238   1      }
 239          
 240                                
 241          #if (CYDEV_ECC_ENABLE == 1)
              
              /*******************************************************************************
              * Function Name: CyWriteRowData
              ********************************************************************************
              *
              * Summary:
              *   Sends a command to the SPC to load and program a row of data in flash.
              *
              *
              * Parameters:
              *  arrayID: 
              *   ID of the array to write.
              *  rowAddress:
              *   rowAddress of flash row to program.
              *  rowData:
              *   Array of bytes to write.
              * 
              * Return:
              *  status:
              *   CYRET_SUCCESS if successful.
              *   CYRET_LOCKED if the SPC is already in use.
              *   CYRET_CANCELED if command not accepted
              *   CYRET_UNKNOWN if there was an SPC error.
              *
              * Reentrant
              *  Yes
              *
              *******************************************************************************/
              cystatus CyWriteRowData(uint8 arrayId, uint16 rowAddress, uint8 * rowData) 
              {
                  uint16 rowSize;
                  cystatus status;
              
                  rowSize = (arrayId > LAST_FLASH_ARRAYID) ? SIZEOF_EEPROM_ROW : SIZEOF_FLASH_ROW;
              
                  status = CyWriteRowFull(arrayId, rowAddress, rowData, rowSize);
                  return status;
              }
              
              #else /* CYDEV_ECC_ENABLE == 0 */
 282          
 283          /*******************************************************************************
 284          * Function Name: CyWriteRowData
 285          ********************************************************************************
 286          *
 287          * Summary:
 288          *   Sends a command to the SPC to load and program a row of data in flash.
 289          *
 290          *
 291          * Parameters:
 292          *  arrayID: 
 293          *   ID of the array to write.
 294          *  rowAddress:
 295          *   rowAddress of flash row to program.
 296          *  rowData:
 297          *   Array of bytes to write.
C51 COMPILER V8.16   CYFLASH                                                               12/13/2010 22:57:35 PAGE 6   

 298          * 
 299          * Return:
 300          *  status:
 301          *   CYRET_SUCCESS if successful.
 302          *   CYRET_LOCKED if the SPC is already in use.
 303          *   CYRET_CANCELED if command not accepted
 304          *   CYRET_UNKNOWN if there was an SPC error.
 305          *
 306          * Reentrant
 307          *  Yes
 308          *
 309          *******************************************************************************/
 310          cystatus CyWriteRowData(uint8 arrayId, uint16 rowAddress, uint8 * rowData) 
 311          {
 312   1          uint8 index;
 313   1          uint32 offset;
 314   1          uint16 rowSize;
 315   1          cystatus status;
 316   1      
 317   1          rowSize = (arrayId > LAST_FLASH_ARRAYID) ? SIZEOF_EEPROM_ROW : (SIZEOF_FLASH_ROW + SIZEOF_ECC_ROW);
 318   1      
 319   1          if (rowSize != SIZEOF_EEPROM_ROW)
 320   1          {
 321   2              /* Save the ECC area. */
 322   2              offset = CYDEV_ECC_BASE + ((uint32) rowAddress * SIZEOF_ECC_ROW);
 323   2              for (index = 0; index < SIZEOF_ECC_ROW; index++)
 324   2              {
 325   3                  rowBuffer[SIZEOF_FLASH_ROW + index] = CY_GET_XTND_REG8((void CYFAR *)(offset + index));
 326   3              }
 327   2          }
 328   1      
 329   1          /* Copy the rowdata to the temporary buffer. */
 330   1          cymemcpy(rowBuffer, rowData, SIZEOF_FLASH_ROW);
 331   1      
 332   1          status = CyWriteRowFull(arrayId, rowAddress, rowBuffer, rowSize);
 333   1          return status;
 334   1      }
 335          
 336          #endif /* CYDEV_ECC_ENABLE == 0 */
 337          
 338          #if (CYDEV_ECC_ENABLE == 0 && CYDEV_CONFIGURATION_ECC == 0)
 339          
 340          /*******************************************************************************
 341          * Function Name: CyWriteRowConfig
 342          ********************************************************************************
 343          *
 344          * Summary:
 345          *  Sends a command to the SPC to load and program a row of config data in flash.
 346          *  This function is only valid for Flash array IDs (not for EEPROM).
 347          *
 348          *
 349          * Parameters:
 350          *  arrayId:
 351          *   ID of the array to write
 352          *  rowAddress:
 353          *   Address of the sector to erase.
 354          *  rowData:  
 355          *   Array of bytes to write.
 356          *   
 357          * Return:
 358          *  status:
 359          *   CYRET_SUCCESS if successful.
C51 COMPILER V8.16   CYFLASH                                                               12/13/2010 22:57:35 PAGE 7   

 360          *   CYRET_LOCKED if the SPC is already in use.
 361          *   CYRET_CANCELED if command not accepted
 362          *   CYRET_UNKNOWN if there was an SPC error.
 363          *
 364          * Reentrant
 365          *  Yes
 366          *
 367          *******************************************************************************/
 368          cystatus CyWriteRowConfig(uint8 arrayId, uint16 rowAddress, uint8 * rowData) 
 369          {
 370   1          uint32 offset;
 371   1          uint16 index;
 372   1          cystatus status;
 373   1      
 374   1          /* Read the existing flash data. */
 375   1          offset = CYDEV_FLS_BASE + ((uint32) rowAddress * SIZEOF_FLASH_ROW);
 376   1          for (index = 0; index < SIZEOF_FLASH_ROW; index++)
 377   1          {
 378   2              rowBuffer[index] = CY_GET_XTND_REG8((void CYFAR *)(offset + index));
 379   2          }
 380   1      
 381   1          /* Copy the rowData to the temporary buffer. */
 382   1          cymemcpy(&rowBuffer[SIZEOF_FLASH_ROW], rowData, SIZEOF_ECC_ROW);
 383   1      
 384   1          status = CyWriteRowFull(arrayId, rowAddress, rowBuffer, SIZEOF_FLASH_ROW + SIZEOF_ECC_ROW);
 385   1          return status;
 386   1      }
 387          
 388          #endif  /* (CYDEV_ECC_ENABLE == 1 && CYDEV_CONFIGURATION_ECC == 0) */
 389          
 390          
 391          /*******************************************************************************
 392          * Function Name: CyWriteRowFull
 393          ********************************************************************************
 394          * Summary:
 395          *   Sends a command to the SPC to load and program a row of data in flash. 
 396          *   rowData array is expected to contain Flash and ECC data if needed.
 397          *
 398          *
 399          * Parameters:
 400          *
 401          *       arrayId: FLASH or EEPROM array id.
 402          *       rowData: pointer to a row of data to write.
 403          *       rowNumber: Zero based number of the row.
 404          *       rowSize: Size of the row.
 405          *   
 406          * Return:
 407          *   CYRET_SUCCESS if successful.
 408          *   CYRET_LOCKED if the SPC is already in use.
 409          *   CYRET_CANCELED if command not accepted
 410          *   CYRET_UNKNOWN if there was an SPC error.
 411          *
 412          *
 413          *******************************************************************************/
 414          cystatus CyWriteRowFull(uint8 arrayId, uint16 rowNumber, uint8* rowData, uint16 rowSize) 
 415          {
 416   1          cystatus status;
 417   1      
 418   1          /* See if we can get the SPC. */
 419   1          if (CySpcLock() == CYRET_SUCCESS)
 420   1          {
 421   2              /* Create the command. */
C51 COMPILER V8.16   CYFLASH                                                               12/13/2010 22:57:35 PAGE 8   

 422   2              status = CySpcCreateCmdLoadRow(arrayId);
 423   2              if (status == CYRET_SUCCESS)
 424   2              {
 425   3                  /* Write the command. */
 426   3                  status = CySpcWriteCommand(rowData, rowSize);
 427   3                  if (status == CYRET_STARTED)
 428   3                  {
 429   4                      /* Spin until completion. */
 430   4                      while(!(*SPC_STATUS & SPC_SPC_IDLE));
 431   4      
 432   4                      status = CySpcReadStatus;
 433   4                      /* See if we were successful. */
 434   4                      if(status != SPC_SUCCESS)
 435   4                          status |= CYRET_SPC_ERROR_MASK;
 436   4                  }
 437   3              }
 438   2      
 439   2              /* Create the command. */
 440   2              if (status == SPC_SUCCESS)
 441   2              {
 442   3                  status = CySpcCreateCmdWriteRow(arrayId, rowNumber, dieTemperature[0], dieTemperature[1]);
 443   3                  if (status == CYRET_SUCCESS)
 444   3                  {
 445   4                      /* Write the command. */
 446   4                      status = CySpcWriteCommand(0, 0);
 447   4                      if (status == CYRET_STARTED)
 448   4                      {
 449   5                          /* Spin until completion. */
 450   5                          while(!(*SPC_STATUS & SPC_SPC_IDLE));
 451   5      
 452   5                          status = CySpcReadStatus;
 453   5                          /* See if we were successful. */
 454   5                          if(status != SPC_SUCCESS)
 455   5                              status |= CYRET_SPC_ERROR_MASK;
 456   5                      }
 457   4                  }
 458   3              }
 459   2      
 460   2              /* Unlock the SPC so someone else can use it. */
 461   2              CySpcUnlock();
 462   2          }
 463   1          else
 464   1          {
 465   2              status = CYRET_LOCKED;
 466   2          }
 467   1      
 468   1          return status;
 469   1      }
 470          
 471          
 472          /*******************************************************************************
 473          * Function Name: CyFlash_SetWaitCycles
 474          ********************************************************************************
 475          *
 476          * Summary:
 477          *  Sets the correct number of wait cycles for the flash based on the frequency 
 478          *  of operation of the devices. This function should be called before increasing 
 479          *  the clock frequency.  It can optionally be called after lowering the clock 
 480          *  frequency in order to improve CPU performance.
 481          *   
 482          * Parameters:
 483          *  freq:
C51 COMPILER V8.16   CYFLASH                                                               12/13/2010 22:57:35 PAGE 9   

 484          *   Frequency of operation in Megahertz.
 485          * 
 486          * Return:
 487          *  void  
 488          * 
 489          * Reentrant
 490          *  Yes
 491          *
 492          *******************************************************************************/
 493          void CyFlash_SetWaitCycles(uint8 freq) 
 494          {
 495   1          /* Clear the Flash Cycles bit fields */
 496   1          *FLASH_CYCLES_PTR &= ~FLASH_CYCLES_MASK;
 497   1          
 498   1          /* Set Flash Cycles bit fields with frequency value*/
 499   1          #if (PSOC3_ES2)
 500   1              if (freq <= 24u)            
 501   1                  *FLASH_CYCLES_PTR |= (LESSER_OR_EQUAL_24MHz << FLASH_CYCLES_MASK_SHIFT);
 502   1              else if (freq <= 48u)
 503   1                  *FLASH_CYCLES_PTR |= (LESSER_OR_EQUAL_48MHz << FLASH_CYCLES_MASK_SHIFT);
 504   1              else
 505   1                  *FLASH_CYCLES_PTR |= (GREATER_48MHz << FLASH_CYCLES_MASK_SHIFT);
 506   1          #endif
 507   1          
 508   1          #if (PSOC3_ES3)
                      if (freq <= 22u)            
                          *FLASH_CYCLES_PTR |= (LESSER_OR_EQUAL_22MHz << FLASH_CYCLES_MASK_SHIFT);
                      else if (freq <= 44u)
                          *FLASH_CYCLES_PTR |= (LESSER_OR_EQUAL_44MHz << FLASH_CYCLES_MASK_SHIFT);
                      else
                          *FLASH_CYCLES_PTR |= (GREATER_44MHz << FLASH_CYCLES_MASK_SHIFT);
                  #endif
 516   1          
 517   1          #if (PSOC5_ES1)
                      if (freq <= 16u)            
                          *FLASH_CYCLES_PTR |= (LESSER_OR_EQUAL_16MHz << FLASH_CYCLES_MASK_SHIFT);
                      else if (freq <= 33u)
                          *FLASH_CYCLES_PTR |= (LESSER_OR_EQUAL_33MHz << FLASH_CYCLES_MASK_SHIFT);
                      else if (freq <= 50u)
                          *FLASH_CYCLES_PTR |= (LESSER_OR_EQUAL_50MHz << FLASH_CYCLES_MASK_SHIFT);
                      else
                          *FLASH_CYCLES_PTR |= (GREATER_51MHz << FLASH_CYCLES_MASK_SHIFT);
                  #endif
 527   1      }
 528          
 529          
 530          #if (PSOC3_ES3 || PSOC5_ES2)
              
              /*******************************************************************************
              * Function Name: CyEEPROM_Start
              ********************************************************************************
              *
              * Summary:
              *  Enable the EEPROM.
              *   
              * Parameters:
              *  void
              * 
              * Return:
              *  void  
              * 
              * Reentrant
C51 COMPILER V8.16   CYFLASH                                                               12/13/2010 22:57:35 PAGE 10  

              *  Yes
              *
              *******************************************************************************/
              void CyEEPROM_Start(void) 
              {    
                  /* Active Power Mode */
                  *PM_ACT_EE_PTR |= PM_EE_MASK;
                  /* Standby Power Mode */
                  *PM_STBY_EE_PTR |= PM_EE_MASK;    
              }
              
              
              /*******************************************************************************
              * Function Name: CyEEPROM_Stop
              ********************************************************************************
              *
              * Summary:
              *  Disable the EEPROM.
              *   
              * Parameters:
              *  void
              * 
              * Return:
              *  void  
              * 
              * Reentrant
              *  Yes
              *
              *******************************************************************************/
              void CyEEPROM_Stop (void) 
              {
                  /* Active Power Mode */
                  *PM_ACT_EE_PTR &= ~PM_EE_MASK;
                  /* Standby Power Mode */
                  *PM_STBY_EE_PTR &= ~PM_EE_MASK;
              }
              
              #endif /* (PSOC3_ES3 || PSOC5_ES2) */
 584          
 585          
 586          /*******************************************************************************
 587          * Function Name: CyEEPROM_ReadReserve
 588          ********************************************************************************
 589          *
 590          * Summary:
 591          *  Request access to the EEPROM for reading and wait until access is available.
 592          *   
 593          * Parameters:
 594          *  void
 595          * 
 596          * Return:
 597          *  void  
 598          *   
 599          * Reentrant
 600          *  Yes
 601          *
 602          *******************************************************************************/
 603          void CyEEPROM_ReadReserve(void) 
 604          {
 605   1          /* Make a request for PHUB to have access */
 606   1          *AHUB_EE_REQ_ACK_PTR |= 0x01u;    
 607   1          /* Wait for acknowledgement from PHUB */
C51 COMPILER V8.16   CYFLASH                                                               12/13/2010 22:57:35 PAGE 11  

 608   1          while (!(*AHUB_EE_REQ_ACK_PTR & 0x02u));    
 609   1      }
 610          
 611          
 612          /*******************************************************************************
 613          * Function Name: CyEEPROM_ReadRelease
 614          ********************************************************************************
 615          *
 616          * Summary:
 617          *  Release the read reservation of the EEPROM.
 618          *   
 619          * Parameters:
 620          *  void
 621          * 
 622          * Return:
 623          *  void  
 624          * 
 625          * Reentrant
 626          *  Yes
 627          *
 628          *******************************************************************************/
 629          void CyEEPROM_ReadRelease(void) 
 630          {
 631   1          *AHUB_EE_REQ_ACK_PTR |= 0x00u;   
 632   1      }
 633          
 634          
 635          /* End of File */


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1254    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     48    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
